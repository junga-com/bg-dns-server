#!/bin/bash

# https://bind9.readthedocs.io/en/latest/
# https://www.dns-school.org/Documentation/bind-arm/Bv9ARM.html
# https://dnsinstitute.com/documentation/
# https://www.opennic.org/

# RFCs for perimeter firewall filtering of spoofed packets
# RFC 2827, RFC 3704, and RFC 3013

# make this host a domain dns server
# A domain dns server uses bind9 to present an internal view of the domain's resources to clients at the domain's locations.
# If the host has an public IP (i.e. its multihomed) it will also present an external view which is an authoritive server for any
# domain names that the domain controls.
#
# Multiple instances of domain dns can be created. Multiple instances provide high available and also a local dns resolver for each
# domain location.
#
# Each instance can be a master or a slave. There can be multiple master servers that each serve the authorative zone information
# shared via a git project but typically there will be one master becasue propagation of changes from master to slave is faster,
# with less latency than the master-master replication.
#
# Slave instances also replicate via the git project the same as a master would. This means that slaves will have reasonablly up to
# data authorative data which means that a slave can be promoted to a master if needed.
#
# Prerequistes:
# Before this Config can be used, the following system wide settings should be set.
#    [dns]domain   : (mandatory) the main domain. A zonefile will be created for this domain.
#
DeclarePlugin Config bg-dns-server:on "
	cmd_run:    bg-dns-server:on::run
	goal: make this host a domain dns server
"

# this will be called to chech whether this creq profile can be activated
function static::bg-dns-server:on::preCheck() {
	local -x domain;         configGet -R domain         dnsServer domain          ""
	[ "$domain" ] || assertConfigPreCheck "This creq Config plugin fails its pre-check because the [dnsServer]domain setting is not set"
}

# This function is the declarative code that defines the unit of configuration that the Config Plugin implements
# Typically, it should contain only cr_ statements and should avoid side affects. Any valid bash syntax is allowed
function bg-dns-server:on::run() {

	local -x dnsRole;           configGet -v"enum:master,slave" -R dnsRole  dnsServer role  "master"
	local -x domain;            configGet -R domain         dnsServer domain          "junga"
	local -x dynLocationDomain; configGet -R domain         dnsServer dynLocationDomain "house.junga"
	#local -x infraInsideIP;  configGet -R infraInsideIP  dnsServer infraInsideIP   "192.168.22.1"
	#local -x infraOutsideIP; configGet -R infraOutsideIP dnsServer infraOutsideIP  "192.168.22.1"
	#local -x listenIP;       configGet -R listenIP       dnsServer listenIP        "192.168.22.1"
	#local -x transferSrcIP;  configGet -R transferSrcIP  dnsServer transferSrcIP   "192.168.22.1"
	#local -x notifySrcIP;    configGet -R notifySrcIP    dnsServer notifySrcIP     "192.168.22.1"
	#local -x querySrcIP;     configGet -R querySrcIP     dnsServer querySrcIP      "192.168.22.1"

	local localIP="192.168.22.95"
	local -x infraInsideIP="$localIP"
	local -x infraOutsideIP="$localIP"
	local -x listenIP="$localIP"
	local -x transferSrcIP="$localIP"
	local -x notifySrcIP="$localIP"
	local -x querySrcIP="$localIP"

	### Dependant Packages
	creq cr_packageInstalled bind9

	# bind should be set to start automatically on boot
	creq cr_daemonAutoStartIsSetTo "named" "any" "enabled"


	### Make a group for dnsadmins and put the bind daemon user in that group
	creq cr_systemGroupExists "dnsadmin"
	creq cr_systemUserIsInGroup "bind" "dnsadmin"

	### Base Folders
	creq cr_fileObjHasAttributes  -g dnsadmin  --perm="d rwx rws r-x"  "/var/lib/bind/"
	creq cr_fileObjHasAttributes  -g dnsadmin  --perm="d rwx rws r-x"  "/var/lib/bind/data/"


	### If the profile/ folder does not yet exist, either clone it or expand the dns.newDomainFolder template folder to create a new empty one
	creq cr_dnsConfigFolderInitialized


	### If there are any changes between here and the Stop call, reload or restart the named service
	creqsTrackChangesStart -s named:reload

	# fix up the /etc/bind/named.conf to be a symlink that points to the correct config
	creq cr_symlinkExists --backup="orig" "/var/lib/bind/profile/named.conf.${dnsRole:-master}" "/etc/bind/named.conf"

	creqsTrackChangesStop -s named
}


DeclarePlugin Config bg-dns-server:off "
	cmd_run:    bg-dns-server::run:off
	goal: stop this host from being a domain dns server
"

function bg-dns-server::run:off() {
	creq cr_packageNotInstalled bind9 purge
}




# usage: cr_dnsConfigFolderInitialized <folderName>
# checks to see if a folder exists at /var/lib/bind/profile/ and if not, apply will make it exist by first trying to clone the
# domain's dns data and second, create a new, minimal configuration folder
DeclareCreqClass cr_dnsConfigFolderInitialized
function cr_dnsConfigFolderInitialized::check() {
	[ -d "/var/lib/bind/profile" ]
}
function cr_dnsConfigFolderInitialized::apply() {
	# TODO: try to clone an existing project

	# now, create a new, minimal config folder from the template
	# NOTE: we assume that this creq is called from an environment that has the context variables already set
 	templateExpandFolder -g dnsadmin --policy="groupwrite" "dns.newDomainFolder" "/var/lib/bind/profile/"
	creq cr_isAGitFolder
}
